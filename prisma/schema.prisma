// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String   @id @default(uuid())
  productName            String
  productDescription     String
  isActive               Boolean  @default(true)
  putToMarket            Boolean  @default(true)
  availableForTrade      Boolean  @default(false)
  totalStockQuantity     Int
  unitPrice              Decimal
  siloStockQuantity      Int?
  marketStockQuantity    Int?
  minimumSellingQuantity Int?
  discountAvailable      Boolean  @default(false)
  discountRate           Int      @default(0)
  images                 Images[]
  storageCostPerUnit Decimal?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
  productInvestments  ProductInvestment[]
}

model User {
  id        String   @id @default(uuid())
  name      String
  surname   String
  email     String   @unique
  password  String
  age       Int
  role      UserRole
  
  supplier  Supplier?
  customer  Customer?
  admin     Admin?
  refreshTokens RefreshToken[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  SUPPLIER
  CUSTOMER
  ADMIN
}

model Supplier {
  id          String  @id @default(uuid())
  companyName String
  website     String?
  logo        String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  products Product[]
  address  Address?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
  productInvestments  ProductInvestment[]
}

model Customer {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
  productInvestments  ProductInvestment[]
}

model Address {
  id           String   @id @default(uuid())
  street       String
  city         String
  postalCode   String?
  country      String
  detailAdress String
  supplierId   String   @unique
  supplier     Supplier @relation(fields: [supplierId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Images {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String      @id @default(uuid())
  orderNumber      String      @unique // Sipariş numarası benzersiz olmalı   orderDate     DateTime @default(now()) // Sipariş tarihi, oluşturulduğu an olsun
  customerId       String
  customer         Customer    @relation(fields: [customerId], references: [id])
  supplier         Supplier    @relation(fields: [supplierId], references: [id])
  supplierId       String
  status           StatusType  @default(PENDING) // Sipariş durumu (Bekliyor, Onaylandı, Kargolandı vb.)
  orderItems       OrderItem[] 
  shipment         Shipment? // Kargo bilgisi (nullable)
  paymentDate      DateTime? // Ödeme tarihi (nullable)
  supplierApproval Boolean? // Tedarikçi onay durumu (nullable)
  totalCost        Decimal? // Toplam maliyet (nullable)
  billId           String? // Fatura bilgisi (nullable)
  bill             Bill?   @relation(fields: [billId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum StatusType {
  PENDING
  FINISHED
  CANCELLED
}

/* model Status {
  id        String   @id @default(uuid())
  name      String   @unique // Durum adı benzersiz olmalı (örn: Bekliyor, Onaylandı, Kargolandı vb.)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} */

model OrderItem {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  quantity     Int
  discountRate Int      @default(0)
  unitPrice    Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Shipment { // tahmini teslimat zamanı eklenebilir
  id             String    @id @default(uuid())
  orderId        String    @unique
  order          Order     @relation(fields: [orderId], references: [id])
  shipmentDate   DateTime?
  shipperId      String
  shipper        Shipper   @relation(fields: [shipperId], references: [id])
  trackingNumber String?
  shippingPrice  Decimal?
  status         StatusType @default(PENDING)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Shipper {
  id           String     @id @default(uuid())
  componyName  String // Kargo firması adı
  phone        String? // Telefon numarası (nullable)
  email        String? // E-posta adresi (nullable)
  website      String? // Web sitesi (nullable)
  shipments    Shipment[]
  ShipmentType String // Burası enum olabilir gemi-kara-hava ilerde düşünülücek.
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Bill {
  id        String    @id @default(uuid())
/*   orderId   String    @unique
  order     Order     @relation(fields: [orderId], references: [id]) */
  billDate  DateTime? // Fatura tarihi (nullable)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  order     Order[]
  productInvestment ProductInvestment[]
  // ... diğer fatura bilgileri (fatura numarası, tutarı vb.)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model ProductInvestment {
  id                String    @id @default(uuid())
  productID         String
  product           Product   @relation(fields: [productID], references: [id])
  quantity          Int
  unitPrice         Decimal
  customerID        String
  customer          Customer  @relation(fields: [customerID], references: [id])
  supplierID        String
  supplier          Supplier  @relation(fields: [supplierID], references: [id])
  billID            String
  bill              Bill?     @relation(fields: [billID], references: [id])    
  active            Boolean   @default(true)
  createdTime       DateTime  @default(now())
  endingTime        DateTime? // Yatırımın bitiş zamanı (nullable)
}
